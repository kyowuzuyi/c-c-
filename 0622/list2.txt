#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
// クラスの応用 再帰的宣言
// 例：List
class List
{
public:
	string name;
	int value;
	List* next;	// 次のリストへのポインタ
	List* prev;	// 前のリストへのポインタ
};

int _tmain(int argc, _TCHAR* argv[])
{
	string name;
	int value;

	List* head = nullptr;	// リストの最初（最初は無し）
	List* tail = nullptr;	// リストの最後（最初は無し）

	try
	{
		ifstream ifs("sample.txt");
		if (ifs) { // openが成功したら
			ifs.exceptions(std::ios::eofbit | std::ios::failbit | std::ios::badbit);
			while (!ifs.eof()){
				ifs >> value >> name;
				cout << value << " " << name.c_str() << endl;

				List* p = new List();
				p->name = name; p->value = value;
				if (head == nullptr) // リストが存在しない
				{
					p->next = nullptr;
					p->prev = nullptr;
					tail = head = p;
				}
				else // すくなくとも１つはリストが存在する
				{
					p->next = nullptr;	// pは最後のリスト(終わりに追加するから)
					p->prev = tail;		// pの直前のリストは直前のtail
					tail->next = p;		// 直前のtailの次はp
					tail = p;			// 新しいtail はp
				}
			}
			ifs.close(); // クローズを入れる
		}
		else {
			cerr << "ファイルオープンに失敗しました" << endl;
		}
	}
	catch (exception& e){
		cerr << e.what() << endl;
	}

	List* p;	// 作業用
	p = head;
	while (p != nullptr)
	{
		cout << p->value << " " << p->name.c_str() << endl;
		p = p->next;
	}

	p = tail;
	while (p != nullptr)
	{
		List* prev = p->prev;
		delete p;
		p = prev;
	}

	return 0;
}

